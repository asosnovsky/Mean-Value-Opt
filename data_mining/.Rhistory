var((Y)^(1/10))
Y = rpois(100,2);
var(Y)
var((Y)^(1/10))
Y = rpois(100,2);
var(Y)
var((Y)^(1/10))
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
Y = rpois(100,2);
var(Y)
var((Y)^(1/1000))
data <- new.env()
getSymbols("AAPL", env=data)
require(quantmod)
getSymbols("AAPL", env=data)
data[["AAPL"]]
getSymbols(c("AAPL","GOOG"), env=data)
data[["AAPL"]]
stocknames = c("AAPL","GOOG")
stocknames = c("AAPL","GOOG")
data <- new.env()
getSymbols(stocknames, env=data)
str(data)
ls(data)
ls(data)
data[[stocknames]]
data[[stocknames[1]]]
data[[stocknames[2]]]
data[[stocknames[1]]]
rm(data,"AAPL")
?rm
stocknames = c("AAPL","GOOG")
data <- new.env()
getSymbols(stocknames, env=data)
ls(data)
rm("AAPL",env=data)
data <- new.env()
getSymbols(stocknames, env=data)
ls(data)
rm("AAPL",envir=data)
ls(data)
for stock in stocknames
disp(stock);
for stock in stocknames
print(stock);
?in
for(stock in stocknames)
print(stock);
for(stock in stocknames)
getSymbols(stock, env=data)
mean(data[[stock]])
for(stock in stocknames)
getSymbols(stock, env=data)
mean(data[[stock]])
var(data[[stock]])
?getSymbols
data[[stock]]$Close
data[[stock]][[]]
cat
cat(stock,".Close")
paste0(stock,".Close")
str(data[[stocl]])
str(data[[stock]])
data[[stock]][[paste0(stock,".Close")]]
data[[stock]]
head(data[[stock]]
)
data[[stock]]$GOOG.Close
data[[stock]]['GOOG.Close']
data[[stock]]["GOOG.Close"]
data[[stock]][["GOOG.Close"]]
str(data[[stock]])
data[[stock]][[1]]
data[[stock]][[1,2]]
data[[stock]][[1,1:3]]
data[[stock]][[1,]]
data[[stock]][[1]]
data[[stock]][[]]
data[[stock]][1,2]
data[[stock]][1,3]
data[[stock]][1,]
data[[stock]][1,4]
data[[stock]][,4]
for(stock in stocknames)
getSymbols(stock, env=data)
mean(data[[stock]][,4])
var(data[[stock]][,4])
rm(stock,envir = data)
rm(stock, envir = data)
rm(GOOG, envir = data)
rm(get(stock), envir = data)
for(stock in stocknames)
getSymbols(stock, env=data)
mean(data[[stock]][,4])
var(data[[stock]][,4])
rm(get(stock), envir = data)
rm(list=stock, envir = data)
for(stock in stocknames)
getSymbols(stock, env=data)
mean(data[[stock]][,4])
var(data[[stock]][,4])
rm(list=stock, envir = data)
for(stock in stocknames)
getSymbols(stock, env=data)
mean(data[[stock]][,4])
var(data[[stock]][,4])
rm(list=stock, envir = data)
suppressMessages()
rexp
-0.8+1.1
-1.7+1.1
library(httr)
library(rvest)
library(magrittr)
yahoo <- html_session("http://biz.yahoo.com/p/")
sector_html <- yahoo %>%
html_nodes(xpath = "//td//td//a/@href") %>%
html_text()
sector_html_titles <- yahoo %>%
html_nodes("td td a font") %>%
html_text()
base <- "http://biz.yahoo.com/p/"
html_pages <- paste(base,sector_html,sep = "")
write(html_pages,file = "sector_html.txt")
yahoo_industry <- html_session(html_pages[1])
industry_html <- yahoo_industry %>%
html_nodes(xpath = "//td//td//a[contains(@href,'conameu')]/@href") %>%
html_text()
titles_text <- paste(sector_html_titles,".txt",sep = "")
length(html_pages)
library(httr)
library(rvest)
library(magrittr)
yahoo <- html_session("http://biz.yahoo.com/p/")
sector_html <- yahoo %>%
html_nodes(xpath = "//td//td//a/@href") %>%
html_text()
sector_html_titles <- yahoo %>%
html_nodes("td td a font") %>%
html_text()
base <- "http://biz.yahoo.com/p/"
html_pages <- paste(base,sector_html,sep = "")
write(html_pages,file = "sector_html.txt")
yahoo_industry <- html_session(html_pages[1])
industry_html <- yahoo_industry %>%
html_nodes(xpath = "//td//td//a[contains(@href,'conameu')]/@href") %>%
html_text()
titles_text <- paste(sector_html_titles,".txt",sep = "")
for (i in 1:2)
{
yahoo_industry <- html_session(html_pages[i])
industry_html <- yahoo_industry %>%
html_nodes(xpath = "//td//td//a[contains(@href,'conameu')]/@href") %>%
html_text()
for (j in 1:length(industry_html))
{
sector_html_url <- paste(base,industry_html,sep = "")
yahoo_industry_stock <- html_session(sector_html_url[j])
industry_stock_html <- yahoo_industry_stock %>%
html_nodes("td td a+ a") %>%
html_text()
write(industry_stock_html, file = titles_text[i],append = "TRUE")
}
}
clear(list=ls())
rm(list=ls())
basic_stock_symbols <- readLines("Basic Materials.txt")
data <- new.evr()
new.env()
data <- new.env()
stock <- getSymbols(basic_stock_symbols[1], src = "yahoo", from = '2015-10-26')
library(quantmod)
stock <- getSymbols(basic_stock_symbols[1], src = "yahoo", from = '2015-10-26')
getSymbols(basic_stock_symbols, src = "yahoo", from = '2015-10-26', env=data)
ls(data)
print(stock)
for stock in basic_stock_symbols
print(stock)
basic_stock_symbols
for(stock in basic_stock_symbols)
print(stock)
for(stock in basic_stock_symbols)
print(stock)
for(stock in basic_stock_symbols)
print(stock)
getSymbols(stock, src = "yahoo", from = '2015-10-26', env=data)
mean(data[[stock]][,4])
for(stock in basic_stock_symbols) {
print(stock)
getSymbols(stock, src = "yahoo", from = '2015-10-26', env=data)
mean(data[[stock]][,4])
}
selected.stocks = 1
selected.stocks
ls(data)
rm(list="CGA", envir=data)
ls(data)
data[["AGU"]]
data[["AGU"]][,4]
mean(data[["AGU"]][,4])
mean(data[["AGU"]])
mean(data[["AGU"]][,4])
var(data[["AGU"]][,4])
as.numeric(var(data[["AGU"]][,4]))
(data[["AGU"]][2:3,4] - data[["AGU"]][1:3,4])/data[["AGU"]][2:3,4]
data[["AGU"]][2:3,4]
data[["AGU"]][1:3,4]
(data[["AGU"]][2:4,4] - data[["AGU"]][1:3,4])/data[["AGU"]][2:4,4]
data[["AGU"]][2:4,4]
data[["AGU"]][1:3,4]
data[["AGU"]][1:3,4]-data[["AGU"]][2:4,4]
as.numeric(data[["AGU"]][1:3,4]-data[["AGU"]][2:4,4])
as.numeric(data[["AGU"]][2:3,4])
as.numeric(data[["AGU"]][,4])
d=as.numeric(data[["AGU"]][,4])
d[1:3]-d[2:4]
type(data[["AGU"]])
typeof(data[["AGU"]])
typeof(data[["AGU"]][,4])
typeof(data[["AGU"]][1,4])
sam.data = as.numeric(data[["AGU"]][,4])
sam.data
data[["AGU"]][1:4,4]
install.packages("astsa")
require(astsa);
data(jj)
ls()
rm(data,stock,stocknames)
options(digits=2)
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=12))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=12))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=12))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=4))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=5))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=6))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=1))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=2))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=24))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=12))
(oz = window(zardoz, start=2293, end=c(2295,12))
)
(oz = window(zardoz, start=2293, end=c(2295,12)))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=12))
(oz = window(zardoz, start=2293, end=c(2295,12)))
time(jj)
(oz = window(zardoz, start=2293, end=c(2295,12)))
(zardoz = ts(rnorm(48), start=c(2293,6), frequency=12))
(oz = window(zardoz, start=2293, end=c(2295,12)))
plot(jj, type="o", col="blue", lty="dashed")
plot(diff(log(jj)), main="logged and diffed")
x = -5:5                  # sequence of integers from -5 to 5
y = 5*cos(x)              # guess
par(mfrow=c(3,2))         # multifigure setup: 3 rows, 2 cols
#---  plot:
plot(x, main="plot(x)")
plot(x, y, main="plot(x,y)")
#---  plot.ts:
plot.ts(x, main="plot.ts(x)")
plot.ts(x, y, main="plot.ts(x,y)")
#---  ts.plot:
ts.plot(x, main="ts.plot(x)")
ts.plot(ts(x), ts(y), col=1:2, main="ts.plot(x,y)")  # note- x and y are ts objects
k = c(.5,1,1,1,.5)            # k is the vector of weights
(k = k/sum(k))
[1] 0.125 0.250 0.250 0.250 0.125
fjj = filter(jj, sides=2, k)  # ?filter for help [but you knew that already]
k = c(.5,1,1,1,.5)            # k is the vector of weights
(k = k/sum(k))
fjj = filter(jj, sides=2, k)  # ?filter for help [but you knew that already]
plot(jj)
k = c(.5,1,1,1,.5)            # k is the vector of weights
(k = k/sum(k))
fjj = filter(jj, sides=2, k)  # ?filter for help [but you knew that already]
plot(jj)
lines(fjj, col="red")         # adds a line to the existing plot
lines(lowess(jj), col="blue", lty="dashed")
par(mfrow=c(1,1))
k = c(.5,1,1,1,.5)            # k is the vector of weights
(k = k/sum(k))
fjj = filter(jj, sides=2, k)  # ?filter for help [but you knew that already]
plot(jj)
lines(fjj, col="red")         # adds a line to the existing plot
lines(lowess(jj), col="blue", lty="dashed")
dljj = diff(log(jj))        # difference the logged data
plot(dljj)                  # plot it (not shown)
shapiro.test(dljj)          # test for normality
Shapiro-Wilk normality test
data:  dljj
W = 0.9725, p-value = 0.07211
sanity.clause(dljj)         # test for sanity
jj
acf(jj)
jj
jj[1]
jj[1,]
jj[1,2]
jj[2]
jj[1:2]
jj
head(jj)
head(jj,5)
typeof(jj)
stock_dir = "E:\data\data\time_series\2008-2012\"
stock_dir = "E:/data/data/time_series/2008-2012/"
setwd("F:/data")
rm(list=ls())
stock_dir = "E:/data/data/time_series/2008-2012/"
stock_list = gsub(".csv","",dir(stock_dir));
stock_name = stock_list[floor(runif(1)*length(stock_list))];
data <- read.csv(paste0(stock_dir,"/",stock_name,".csv"));
dates <- data[,1];
data <- as.numeric(data[,4]);
returns <- (data[2:length(data)]-data[1:length(data)-1])/data[1:length(data)-1];
normalized_returns <- returns-min(returns);
plot(data, x=dates, type='l')
plot(normalized_returns, x=dates[2:length(dates)], type='l')
plot(log(normalized_returns), x=dates[2:length(dates)], type='l')
plot.ts(boxcox(normalized_returns,))
boxcox <- function(X,lmd) {
if(lmd == 0) {
return((log(X)))
} else {
return((((X^lmd) - 1)/lmd))
}
}
setwd("F:/data")
rm(list=ls())
stock_dir = "E:/data/data/time_series/2008-2012/"
stock_list = gsub(".csv","",dir(stock_dir));
stock_name = stock_list[floor(runif(1)*length(stock_list))];
data <- read.csv(paste0(stock_dir,"/",stock_name,".csv"));
dates <- data[,1];
data <- as.numeric(data[,4]);
returns <- (data[2:length(data)]-data[1:length(data)-1])/data[1:length(data)-1];
normalized_returns <- returns-min(returns);
plot(data, x=dates, type='l')
plot(normalized_returns, x=dates[2:length(dates)], type='l')
plot(log(normalized_returns), x=dates[2:length(dates)], type='l')
rm(list=ls())
stock_dir = "E:/data/data/time_series/2008-2012/"
stock_list = gsub(".csv","",dir(stock_dir));
stock_name = stock_list[floor(runif(1)*length(stock_list))];
data <- read.csv(paste0(stock_dir,"/",stock_name,".csv"));
data <- read.csv(paste0(stock_dir,"/",stock_name,".csv"));
stock_dir = "E:/data/data/time_series/2008-2012"
stock_list = gsub(".csv","",dir(stock_dir));
stock_name = stock_list[floor(runif(1)*length(stock_list))];
data <- read.csv(paste0(stock_dir,"/",stock_name,".csv"));
stock_dir = "E:/data/data/time_series/2008-2012/Basic Materials"
stock_list = gsub(".csv","",dir(stock_dir));
stock_name = stock_list[floor(runif(1)*length(stock_list))];
data <- read.csv(paste0(stock_dir,"/",stock_name,".csv"));
dates <- data[,1];
data <- as.numeric(data[,4]);
returns <- (data[2:length(data)]-data[1:length(data)-1])/data[1:length(data)-1];
normalized_returns <- returns-min(returns);
plot(data, x=dates, type='l')
plot(data, x=dates, type='l', title=stock_name)
plot(data, x=dates, type='l', main=stock_name)
stock_name
plot(data, x=dates, type='l', main=stock_name)
plot(data)
plot.ts(data)
sector = sector_html_titles[1];
{
stock_dir <- paste0("time_series/2008-2012/",sector)
stock_list <- gsub(".csv","",dir(stock_dir))
dir.create("filtered_stocks/",showWarnings = FALSE)
for(part in 2:length(partitions_year[,1]))
rm(list=ls())
library(chron) #used for creating date vector
library(dplyr)
library(timeSeries)
library(zoo)
startTime = Sys.time();
#set home directory if needed
#setwd("F:/Mean-Value-Opt/data_mining")
getDateVector <- function(d1,d2,format="%Y%m%d") {
dates <-seq.Date(to = as.Date(d2,format=format),
from = as.Date(d1,format=format),
by = 1)
return(as.Date(dates[!is.weekend(dates)]))
}
# get titles
sector_html_titles <- gsub("[\r\n]", "", read.csv(file = "sector_html_titles.csv")$x);
setwd("F:/Mean-Value-Opt/data_mining")
getDateVector <- function(d1,d2,format="%Y%m%d") {
dates <-seq.Date(to = as.Date(d2,format=format),
from = as.Date(d1,format=format),
by = 1)
return(as.Date(dates[!is.weekend(dates)]))
}
# get titles
sector_html_titles <- gsub("[\r\n]", "", read.csv(file = "sector_html_titles.csv")$x);
partitions_year = rbind(c("20080101","20081231"),
c("20090101","20091231"),
c("20100101","20101231"),
c("20110101","20111231"),
c("20120101","20121231"))
sector = sector_html_titles[1];
{
stock_dir <- paste0("time_series/2008-2012/",sector)
stock_list <- gsub(".csv","",dir(stock_dir))
dir.create("filtered_stocks/",showWarnings = FALSE)
for(part in 2:length(partitions_year[,1]))
#part = 1
{
# create general date vector
merged_data <- data.frame(Index=getDateVector(partitions_year[part,1],partitions_year[part,2]))
year <- substr(partitions_year[part,1],1,4)
#create directory name data/filtered_stocks/YEAR
merged_data_directory <- paste0("filtered_stocks/",year)
dir.create(merged_data_directory,showWarnings = FALSE)
#create file name data/filtered_stocks/YEAR/SECTOR.csv
merged_data_file <- paste0(merged_data_directory,"/",sector,".csv")
for (stock in stock_list)
{
data <- read.csv(paste0(stock_dir,"/",stock,".csv"))
data[,1] <- as.Date(data[,1]);
# filter data by year
data_year <- dplyr::filter(data,grepl(year,Index))
# coerce index to date and close prices to numeric
data_year$Index <- as.Date(data_year$Index)
data_year$Close <- as.numeric(data_year$Close)
# rename col.names to specific stock
data_year_short <- data_year[c("Index","Close")]
colnames(data_year_short) <- c("Index",paste0("Close.",stock))
if (nrow(data_year) > nrow(merged_data)*.85) #if the stock has more than 85% of time data we keep it
{
merged_data <- merge(merged_data,data_year_short,by.x = "Index",by.y = "Index",all.x = TRUE)
# determine if last column of merged_data had NA values if so replace with previous open price.
last.na = 0;
for (naInd in which(is.na(merged_data[,ncol(merged_data)])) ) {
possibs = which(data[,1] < merged_data[naInd,1]);
if( length(possibs) > 0 ) {
merged_data[naInd,ncol(merged_data)] = data[max(possibs),4];
} else {
merged_data[naInd,ncol(merged_data)] = data[min(which(data[,1] >= merged_data[naInd,1])),2];
}
}
}
print(paste0(round(which(stock_list == stock)/length(stock_list)*100,2),'% Done, [', ncol(merged_data),'/',length(stock_list),'] year: ', year, ' sector: ', sector ));
}
write.csv(merged_data,file = merged_data_file,row.names = FALSE);
}
}
stock_dir <- paste0("time_series/2008-2012/",sector)
stock_list <- gsub(".csv","",dir(stock_dir))
dir.create("filtered_stocks/",showWarnings = FALSE)
for(part in 1:length(partitions_year[,1]))
#part = 1
{
# create general date vector
merged_data <- data.frame(Index=getDateVector(partitions_year[part,1],partitions_year[part,2]))
year <- substr(partitions_year[part,1],1,4)
#create directory name data/filtered_stocks/YEAR
merged_data_directory <- paste0("filtered_stocks/",year)
dir.create(merged_data_directory,showWarnings = FALSE)
#create file name data/filtered_stocks/YEAR/SECTOR.csv
merged_data_file <- paste0(merged_data_directory,"/",sector,".csv")
for (stock in stock_list)
{
data <- read.csv(paste0(stock_dir,"/",stock,".csv"))
data[,1] <- as.Date(data[,1]);
# filter data by year
data_year <- dplyr::filter(data,grepl(year,Index))
# coerce index to date and close prices to numeric
data_year$Index <- as.Date(data_year$Index)
data_year$Close <- as.numeric(data_year$Close)
# rename col.names to specific stock
data_year_short <- data_year[c("Index","Close")]
colnames(data_year_short) <- c("Index",paste0("Close.",stock))
if (nrow(data_year) > nrow(merged_data)*.85) #if the stock has more than 85% of time data we keep it
{
merged_data <- merge(merged_data,data_year_short,by.x = "Index",by.y = "Index",all.x = TRUE)
# determine if last column of merged_data had NA values if so replace with previous open price.
last.na = 0;
for (naInd in which(is.na(merged_data[,ncol(merged_data)])) ) {
possibs = which(data[,1] < merged_data[naInd,1]);
if( length(possibs) > 0 ) {
merged_data[naInd,ncol(merged_data)] = data[max(possibs),4];
} else {
merged_data[naInd,ncol(merged_data)] = data[min(which(data[,1] >= merged_data[naInd,1])),2];
}
}
}
print(paste0(round(which(stock_list == stock)/length(stock_list)*100,2),'% Done, [', ncol(merged_data),'/',length(stock_list),'] year: ', year, ' sector: ', sector ));
}
write.csv(merged_data,file = merged_data_file,row.names = FALSE);
}
sector_html_titles
